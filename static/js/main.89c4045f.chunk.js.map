{"version":3,"sources":["web3.js","lottery.js","App.js","serviceWorker.js","index.js"],"names":["web3","Web3","window","currentProvider","eth","Contract","App","state","manager","players","balance","value","message","onSubmit","event","a","preventDefault","getAccounts","accounts","setState","lottery","methods","enter","send","from","utils","toWei","onClick","pickWinner","call","getPlayers","getBalance","options","address","this","className","length","fromWei","onChange","target","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.89c4045f.chunk.js","sourcesContent":["import Web3 from 'web3';\n\nconst web3 = new Web3(window.web3.currentProvider);\n\nexport default web3;","import web3 from './web3';\n\nconst address = '0x7c53d703225CE2a6eF064e2ce2A859A3695e7501';\n\nconst abi = [{\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"manager\",\n    \"outputs\": [{\n        \"name\": \"\",\n        \"type\": \"address\"\n    }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n}, {\n    \"constant\": false,\n    \"inputs\": [],\n    \"name\": \"pickWinner\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n}, {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"random\",\n    \"outputs\": [{\n        \"name\": \"\",\n        \"type\": \"uint256\"\n    }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n}, {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"getPlayers\",\n    \"outputs\": [{\n        \"name\": \"\",\n        \"type\": \"address[]\"\n    }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n}, {\n    \"constant\": false,\n    \"inputs\": [],\n    \"name\": \"enter\",\n    \"outputs\": [],\n    \"payable\": true,\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n}, {\n    \"constant\": true,\n    \"inputs\": [{\n        \"name\": \"\",\n        \"type\": \"uint256\"\n    }],\n    \"name\": \"players\",\n    \"outputs\": [{\n        \"name\": \"\",\n        \"type\": \"address\"\n    }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n}, {\n    \"inputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n}];\n\n\nexport default new web3.eth.Contract(abi, address);","import React, { Component } from 'react';\nimport './App.css';\nimport web3 from './web3';\nimport lottery from './lottery';\n\nclass App extends Component {\n  state = {\n    manager: '',\n    players: [],\n    balance: '',\n    value: '',\n    message: ''\n  }\n  async componentDidMount(){\n    const manager = await lottery.methods.manager().call();\n    const players = await lottery.methods.getPlayers().call();\n    const balance = await web3.eth.getBalance(lottery.options.address);\n    this.setState({manager, players, balance});\n\n  }\n\n  onSubmit = async (event) => {\n    event.preventDefault();\n    \n    const accounts = await web3.eth.getAccounts();\n\n    this.setState({message: 'Waiting on transcation...'})\n\n    await lottery.methods.enter().send({\n      from: accounts[0],\n      value: web3.utils.toWei(this.state.value, 'ether')\n    });\n    this.setState({message: 'You have Entered the Lottery Good LUCK!'})\n  };\n\n  onClick = async() =>{\n      const accounts = await web3.eth.getAccounts();\n\n      this.setState({message: 'Hold your heart beats'});\n\n      await lottery.methods.pickWinner().send({\n        from: accounts[0]\n      });\n      this.setState({message: 'Check your MetaMask Account'});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n       <h1> Lottery </h1>\n       <div className=\"cards\">\n       {/* <h4>Manager Account= {this.state.manager}</h4> */}\n         <h4>Current Number of Players= {this.state.players.length}</h4>\n         <h3>Prize Pool= {web3.utils.fromWei(this.state.balance, 'ether')} Ether</h3>\n         <form className=\"form\" onSubmit={this.onSubmit}>\n           <h2>Want To Try your Luck ?</h2>\n           <div>\n             <label>Amount of Ether to Enter: </label>\n             <input\n              value={this.state.value}\n              onChange={event => this.setState({value: event.target.value})}\n             />\n           </div>\n           <button className=\"btn\">Enter</button>\n         </form>\n         <h4>Ready to Pick a Winner</h4>\n         <button className=\"btn\" onClick={this.onClick}>Go </button>\n         <h3>{this.state.message}</h3>\n       </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}